// SPDX-License-identifier: Unlicense

// 1) need ability to accept proposals and sotre them.   proposal = name and number
//2) need voters &votig ability
// -----keep track of voting
// check voters are authentcated to vote. this can be a governance token  so only people whom hold said tokesn have governance power in the dapp(for local governemnt dapp use proprety number that i was told to use)
//3) chair person ( wallet that deploys the contract 
// authenticate and deploy contract
pragma solidity ^0.8.4;

contract Ballot {

    // struct is a method to create your own data type
    
    //voters: voted=bool (bool or boolean is a true or falce statement variable) , access to vote = uint (uint is declaring osmething in solidity as an integer), vote index
    struct Voter {
        uint vote;
        bool voted;
        uint weight;
    }
    struct Proposal {
    bytes32  name; // name of each proposal
    uint voteCount; // number of acumulated votes
    }

    //arrays

    Proposal[] public proposals;

    //mapping allows for us to create a store value with keys and indexes

    mapping(address => Voter) public voters; // voters get address as key and voter for value

    address public chairperson;
    // constructor function is ran imedietly when the contract is deployed.  
    // memory allows proposalNames to be temporaly stored.  Memory defines a temporary data location in Solidity durring runtime only of methods
    // msg.sender = global variable that states the person who is currently connecting to contract
    constructor(bytes32[] memory proposalNames) {
        chairperson = msg.sender;
        // add 1 to chairperosn weight
        voters[chairperson].weight = 1;
        // will add proposal names to Smartcontract upon deployment 
        for(uint i=0; i <proposalNames.length; i++ ) {
            proposals.push(Proposal({
                name: proposalNames[i],
                voteCount: 0
            }));
        }
    }

// need function for authenticating voter

    function giveRightToVote(address voter) public {
        require(msg.sender == chairperson,
                'Only the chairperson cah give accsess to vote');
                //require voter has not voted yer
                //adding '!' makes statemenmt false
        require(!voters[voter].voted,
                'The voter has already voted');
        require(voters[voter].weight == 0);

        voters[voter].weight == 1;
    }
// need function for voting

    function vote(uint proposal) public {
        Voter storage sender = voters [msg.sender];
        require(sender.weight != 0, 'Has no right to vote');
        require(!sender.voted, 'Already voted');
        sender.voted = true;
        sender.vote = proposal;

        proposals[proposal].voteCount = proposals[proposal].voteCount + sender.weight;

    }
    // need function for showing results

    //function that shows winning proposal by integer

        function winningProposal() public view returns (uint winningProposal_) {
            uint winningVoteCount = 0;
            for( uint i=0; i < proposals.length; i++) {
                if(proposals[i].voteCount > winningVoteCount) {
                    winningVoteCount = proposals[i].voteCount;
                    winningProposal_ = i;
                }
            }
        }
    //function that shows winner by name 

        function winningName() public view returns (bytes32 winningName_) {
            winningName_ = proposals[winningProposal()].name;
        }

}
